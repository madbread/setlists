{"version":3,"sources":["api/api.js","api/index.js","Forms/useFormData.js","Forms/LoginForm.js","components/Nav.js","components/Setlists/Setlist.js","components/Setlists/FilterSongOptions.js","components/Setlists/AddSong.js","components/Setlists/SetlistsPage.js","components/Songs/SongsPage.js","components/Footer.js","components/Page.js","App.js","useFetchAuth.js","index.js"],"names":["app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","getDatabase","songlistRef","ref","songsRef","instrumentsRef","api","getSonglistsRef","getSongsRef","getInstrumentsRef","getSonglistRef","id","getSonglistSongsRef","login","email","pass","auth","getAuth","signInWithEmailAndPassword","then","response","console","log","catch","error","errorCode","code","errorMessage","message","logout","signOut","getLoginObserver","callback","onAuthStateChanged","user","noop","handleLogin","data","login_email","login_pass","LoginForm","onSubmit","init","useState","formData","setFormData","handleSubmit","e","preventDefault","handleInputChange","persist","target","name","value","handleReset","handleSetFormData","useFormData","className","htmlFor","type","onChange","Nav","to","activeClassName","isActive","match","location","pathname","Setlist","editMode","setlist","songsMap","handleRemoveSong","showNate","showMike","showAdam","showCarl","highlight","Object","entries","songs","sort","map","song","idx","songId","title","nate","mike","adam","carl","key","onClick","FilterSongOptions","filter","setFilter","placeholder","AddSong","handleAddSong","showAddSong","setShowAddSong","availableSongs","setAvailableSongs","filteredSongs","setFilteredSongs","selectedSong","setSelectedSong","SelectSong","length","matchStr","toLowerCase","newFilteredSongs","s","includes","nowAvailable","SetlistsPage","setEditMode","selectedListId","setSelectedListId","setlists","setSetlists","setSongs","setShowNate","setShowMike","setShowAdam","setShowCarl","setHighlight","setlistMap","setSetlistMap","setSongsMap","loadingSongs","setLoadingSongs","loadingSetlists","setLoadingSetlists","makeArrayFromDB","snapshot","val","item","useEffect","onValue","lists","songsArr","includedSongIds","keys","songsNotInList","inLegend","Set","forEach","add","list","checked","has","songlistSongsRef","get","songsData","removedOrder","set","newLastNumber","SongsPage","Footer","Page","path","App","setUser","loading","setLoading","logged_in","useFetchAuth","loadingUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65629d52.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport {getDatabase, ref} from 'firebase/database'\nimport { getAuth, signInWithEmailAndPassword, onAuthStateChanged, signOut } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCQeCmX7ouzkQGwXDWqGHaKwXHZg6yZjgQ\",\n  authDomain: \"madbread-setlists.firebaseapp.com\",\n  databaseURL: \"https://madbread-setlists.firebaseio.com\",\n  projectId: \"madbread-setlists\",\n  storageBucket: \"madbread-setlists.appspot.com\",\n  messagingSenderId: \"659663875433\",\n  appId: \"1:659663875433:web:3a43234812cd2a9814e1f8\"\n}\n\n// Initialize DB\nconst app = initializeApp(firebaseConfig);\nconst db = getDatabase(app);\nconst songlistRef = ref(db, 'data/songLists');\nconst songsRef = ref(db, 'data/songs');\nconst instrumentsRef = ref(db, 'meta/instruments');\n\nconst methods = {\n  getSonglistsRef: () => songlistRef,\n  getSongsRef: () => songsRef,\n  getInstrumentsRef: () => instrumentsRef,\n\n  getSonglistRef: id => ref(db, `data/songLists/${id}`),\n  getSonglistSongsRef: id => ref(db, `data/songLists/${id}/songs`),\n  \n  login: (email, pass) => {\n    const auth = getAuth();\n      signInWithEmailAndPassword(auth, email, pass)\n        .then((response) => {\n          console.log('response: ', response)\n          console.log('...you are signed in!')\n        })\n        .catch((error) => {\n          const errorCode = error.code;\n          const errorMessage = error.message;\n          console.log(errorCode, errorMessage)\n        });\n  },\n\n  logout: () => {\n    const auth = getAuth();\n    signOut(auth)\n      .then(() => console.log('You have signed out'))\n      .catch(error => console.log('Error signing out: ', error))\n  },\n\n  getLoginObserver: callback => {\n    const auth = getAuth();\n      onAuthStateChanged(auth, user => {\n        user = user ? user : {}\n        callback(user)\n      })\n  }\n};\n\nexport default methods;","import api from './api';\n\nexport default api;","// This hook handles input changes on a form\n//   and returns them as an inputs object\nimport {useState} from 'react'\nconst noop = () => {}\n\nexport const useFormData = (onSubmit = noop, init = {}) => {\n  const [formData, setFormData] = useState(init)\n\n  const handleReset = e => {\n    if (e?.preventDefault) e?.preventDefault()\n    setFormData(init)\n  }\n\n  const handleSetFormData = data => setFormData(data)\n\n  const handleSubmit = e => {\n    if (e?.preventDefault) e?.preventDefault()\n    onSubmit(formData)\n  }\n\n  const handleInputChange = e => {\n    if (e?.persist) e.persist()\n    setFormData(formData => ({\n      ...formData,\n      [e.target.name]:e.target.value\n    }))\n  }\n\n  return {\n    formData,\n    handleSubmit,\n    handleInputChange,\n    handleReset,\n    handleSetFormData    \n  }\n}\n","import React from 'react'\nimport api from '../api/'\nimport {useFormData} from './useFormData'\nimport './forms.css'\n\nconst handleLogin = data => api.login(data.login_email, data.login_pass)\n\nconst LoginForm = () => {\n  const {formData, handleSubmit, handleInputChange} = useFormData(handleLogin)\n\n  return (\n    <form className=\"basic-form\" onSubmit={handleSubmit}>\n      <h3>Madbread Setlist App Login</h3>\n      <div className=\"field-pair\">\n        <label htmlFor=\"login_email\">Email </label>\n        <input\n          type=\"email\"\n          name=\"login_email\"\n          id=\"login_email\"\n          value={formData.login_email || ''}\n          onChange={handleInputChange}\n        />\n      </div>\n      <div className=\"field-pair\">\n        <label htmlFor=\"login_pass\">Password </label>\n        <input\n          id=\"login_pass\"\n          type=\"password\"\n          name=\"login_pass\"\n          value={formData.login_pass || ''}\n          onChange={handleInputChange}\n        />\n      </div>\n      <button type=\"submit\">login</button>\n    </form>\n  )\n}\n\nexport default LoginForm\n","import './nav.css';\nimport { NavLink } from \"react-router-dom\";\n\nconst Nav = () => {\n  return  (\n    <nav>\n      <ul className=\"nav nav-pills\">\n        <li>\n          <NavLink\n            to=\"/setlists\" \n            activeClassName=\"active\"\n            isActive={(match, location) => (match || location.pathname === '/')}\n          >\n            Setlists\n          </NavLink>\n        </li>\n        <li>\n          <NavLink to=\"/songs\" activeClassName=\"active\">\n            Songs\n          </NavLink> \n        </li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Nav;\n","import PropTypes from 'prop-types';\n\nconst Setlist = ({\n  editMode,\n  setlist,\n  songsMap,\n  handleRemoveSong,\n  showNate,\n  showMike,\n  showAdam,\n  showCarl,\n  highlight\n}) => {\n\n  const displayList = () => {\n    const sorted = Object.entries(setlist.songs).sort(([,a],[,b]) => a-b);\n    return sorted.map((song, idx) => {\n      const songId = song[0];\n      return(\n        <tr key={songId} className={`color_${songsMap[songId][highlight] || ''}`}>\n          <td className=\"song-title\">{idx + 1}) {songsMap[songId].title}</td>\n          {showNate && <td className=\"name-col\">{songsMap[songId].nate}</td>}\n          {showMike && <td className=\"name-col\">{songsMap[songId].mike}</td>}\n          {showAdam && <td className=\"name-col\">{songsMap[songId].adam}</td>}\n          {showCarl && <td className=\"name-col\">{songsMap[songId].carl}</td>}\n          <td className=\"short-col song-key\">{songsMap[songId].key}</td>\n          {editMode && <td className=\"short-col\"><button className=\"remove-button\" type=\"button\" onClick={() => handleRemoveSong(songId)}>X</button></td>}\n        </tr>);\n    })\n  }\n\n  return  (\n    <div className=\"songlist-container\">\n      {setlist && \n        <table className=\"songlist\">\n          <thead>\n            <tr>\n              <th className=\"song-title\"></th>\n              {showNate && <th className=\"name-col\">Nate</th>}\n              {showMike && <th className=\"name-col\">Mike</th>}\n              {showAdam && <th className=\"name-col\">Adam</th>}\n              {showCarl && <th className=\"name-col\">Carl</th>}\n              <th className=\"short-col song-key\">key</th>\n              {editMode && <th className=\"short-col\"></th>}\n            </tr>\n          </thead>\n          <tbody>\n            {displayList()}\n          </tbody>\n        </table>\n      }\n    </div>\n  )\n}\n\nSetlist.propTypes = {\n  setlist: PropTypes.object,\n  songsMap: PropTypes.object,\n  handleRemoveSong: PropTypes.func,\n  editMode: PropTypes.bool,\n  showNate: PropTypes.bool,\n  showMike: PropTypes.bool,\n  showAdam: PropTypes.bool,\n  showCarl: PropTypes.bool,\n  highlight: PropTypes.string\n}\n\n\nexport default Setlist;\n","import PropTypes from 'prop-types';\n\nconst FilterSongOptions = ({filter, setFilter}) => (\n  <div className=\"filter-container\">\n    <input placeholder=\"filter songs by title\" type=\"text\" value={filter} onChange={setFilter} />\n  </div>\n);\n\nFilterSongOptions.propTypes = {\n  filter: PropTypes.string,\n  setFilter: PropTypes.func\n}\n\nexport default FilterSongOptions;","import PropTypes from 'prop-types';\nimport {useState} from 'react';\nimport FilterSongOptions from './FilterSongOptions';\n\nconst AddSong = ({songs,  handleAddSong}) => {\n  const [showAddSong, setShowAddSong] = useState(false);\n  const [filter, setFilter] = useState('');\n\n  const [availableSongs,  setAvailableSongs] = useState([...songs]);\n  const [filteredSongs, setFilteredSongs] = useState([...availableSongs]);\n  const [selectedSong, setSelectedSong] = useState(filteredSongs[0]?.id)\n\n  const handleSaveSong = () =>  {\n    handleAddSong(selectedSong)\n    const nowAvailable = availableSongs.filter(s => s.id !== selectedSong);\n    setAvailableSongs(nowAvailable);\n    setFilteredSongs([...nowAvailable]);\n    setSelectedSong(nowAvailable[0]?.id);\n    setFilter('');\n  }\n\n  const handleSetFilter = e => {\n    setFilter(e.target.value);\n    if (e.target.value?.length > 1) {\n      const matchStr = e.target.value.toLowerCase();\n      const newFilteredSongs = songs.filter(s => s.title.toLowerCase().includes(matchStr));\n      setFilteredSongs(newFilteredSongs);\n      setSelectedSong(newFilteredSongs[0]?.id);\n    } else {\n      setFilteredSongs([...songs])\n    }\n  }\n\n  const SelectSong = () => showAddSong\n    ? (<div className=\"input-container\">\n        <select value={selectedSong} onChange={e => setSelectedSong(e.target.value)} >\n          {filteredSongs.map(song => <option value={song.id} key={song.id}>{song.title}</option>)}\n        </select>\n       </div>\n      )\n    : null;\n\n  return  (\n    <div className=\"add-song\">\n      <div className=\"controls\">\n        <button onClick={() => setShowAddSong(!showAddSong)}>{showAddSong ? 'cancel' : 'add song'}</button>\n        <SelectSong/>\n      </div>\n      {showAddSong && <FilterSongOptions filter={filter} setFilter={handleSetFilter}/>}\n      {showAddSong && <button type=\"button\" onClick={handleSaveSong}>save to list</button>}\n    </div>\n  )\n}\n\nAddSong.propTypes = {\n  songs: PropTypes.array,\n  handleAddSong: PropTypes.func\n}\n\nexport default AddSong;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport {onValue, get, set} from 'firebase/database';\nimport Setlist from './Setlist';\nimport AddSong from './AddSong';\n\nconst SetlistsPage = () => {\n  const [editMode, setEditMode] = useState(false);\n  const [selectedListId, setSelectedListId] = useState(null);\n  const [setlists, setSetlists] = useState([]);\n  const [songs, setSongs] = useState([]);\n\n  const [showNate, setShowNate]   = useState(false);\n  const [showMike, setShowMike]   = useState(false);\n  const [showAdam, setShowAdam]   = useState(false);\n  const [showCarl, setShowCarl]   = useState(false);\n  const [highlight, setHighlight] = useState('');\n\n  const [setlistMap, setSetlistMap] = useState({});\n  const [songsMap, setSongsMap] = useState({});\n\n  const [loadingSongs, setLoadingSongs] = useState(true);\n  const [loadingSetlists, setLoadingSetlists] = useState(true);\n\n  const makeArrayFromDB = snapshot => {\n    return Object.entries(snapshot.val()).map(([id, item]) => {\n      item.id = id;\n      return item;\n    });\n  }\n\n  const handleRemoveSong = songId => {\n    const songlistSongsRef = api.getSonglistSongsRef(selectedListId);\n    get(songlistSongsRef).then(songs => {\n      const songsData = songs.val();\n      const removedOrder = songsData[songId];\n      delete songsData[songId];\n      for (const song in songsData) {\n        if (songsData[song] > removedOrder ) {\n          songsData[song]--;\n        }\n      }\n      set(songlistSongsRef, songsData);\n    });\n  }\n\n  const handleAddSong = songId => {\n    const songlistSongsRef = api.getSonglistSongsRef(selectedListId);\n    get(songlistSongsRef).then(songs => {\n      const songsData = songs.val();\n      const newLastNumber = Object.keys(setlistMap[selectedListId].songs).length\n      songsData[songId] = newLastNumber;\n      set(songlistSongsRef, songsData);\n    });\n  }\n\n  useEffect(() => {\n    onValue(api.getSonglistsRef(), snapshot => {\n      setSetlistMap(snapshot.val());\n      const lists = makeArrayFromDB(snapshot);\n      setSetlists(lists);\n      setLoadingSetlists(false);\n    });\n    \n    onValue(api.getSongsRef(), snapshot => {\n      setSongsMap(snapshot.val());\n      const songsArr = makeArrayFromDB(snapshot);\n      setSongs(songsArr);\n      setLoadingSongs(false);\n    });\n  }, [])\n\n  if (loadingSetlists || loadingSongs) return <p>Loading...</p>\n\n  if (selectedListId === null) setSelectedListId(setlists[0].id);\n  const includedSongIds =  Object.keys(setlistMap[selectedListId || setlists[0].id].songs);\n  const songsNotInList = songs.filter(s => !includedSongIds.includes(s.id));\n\n  const inLegend = new Set();\n  if (highlight !== '') includedSongIds.forEach(id => inLegend.add(songsMap[id][highlight]));\n\n  return  (\n    <div className=\"page-setlist\">\n      <div className=\"list-selector\">\n        <div className=\"select-container\">\n          <select value={selectedListId} onChange={e => setSelectedListId(e.target.value)}>\n            {setlists.map(list => <option value={list.id} key={list.id}>{list.title}</option>)}\n          </select>\n        </div>\n        <button type=\"button\" onClick={() => setEditMode(!editMode)}>\n          {editMode ? 'Edit Mode' : 'Read Only'}\n        </button>\n      </div>\n\n      <div className=\"highlight-controls\">\n        <label htmlFor=\"cb_nate\">Nate</label>\n        <input id=\"cb_nate\" type=\"checkbox\" checked={showNate} onChange={e => setShowNate(e.target.checked)}/>\n        <label htmlFor=\"cb_mike\">Mike</label>\n        <input id=\"cb_mike\" type=\"checkbox\" checked={showMike} onChange={e => setShowMike(e.target.checked)}/>\n        <label htmlFor=\"cb_adam\">Adam</label>\n        <input id=\"cb_adam\" type=\"checkbox\" checked={showAdam} onChange={e => setShowAdam(e.target.checked)}/>\n        <label htmlFor=\"cb_carl\">Carl</label>\n        <input id=\"cb_carl\" type=\"checkbox\" checked={showCarl} onChange={e => setShowCarl(e.target.checked)}/>\n        <select value={highlight} onChange={e => setHighlight(e.target.value)}>\n          <option value=\"\">None</option>\n          <option value=\"nate\">Nate</option>\n          <option value=\"mike\">Mike</option>\n          <option value=\"adam\">Adam</option>\n          <option value=\"carl\">Carl</option>\n        </select>\n      </div>\n\n      {highlight !== '' &&\n        <div className=\"highlight-legend\">\n          {inLegend.has('Mandolin') && <span className=\"color_Mandolin\">Mandolin</span>}\n          {inLegend.has('Bass') && <span className=\"color_Bass\">Bass</span>}\n          {inLegend.has('Fiddle') && <span className=\"color_Fiddle\">Fiddle</span>}\n          {inLegend.has('Guitar') && <span className=\"color_Guitar\">Guitar</span>}\n          {inLegend.has('Electric') && <span className=\"color_Electric\">Electric</span>}\n          {inLegend.has('Banjo') && <span className=\"color_Banjo\">Banjo</span>}\n          {inLegend.has('Harmonica') && <span className=\"color_Harmonica\">Harmonica</span>}\n        </div>\n      }\n      <Setlist\n        editMode={editMode}\n        setlist={setlistMap[selectedListId]}\n        songsMap={songsMap}\n        handleRemoveSong={handleRemoveSong}\n        showNate={showNate}\n        showMike={showMike}\n        showAdam={showAdam}\n        showCarl={showCarl}\n        highlight={highlight}\n      />\n      {editMode && <AddSong handleAddSong={handleAddSong} songs={songsNotInList} />}\n    </div>\n  )\n}\n\nexport default SetlistsPage;\n","import {useState, useEffect} from 'react';\nimport api from '../../api';\nimport {onValue} from 'firebase/database';\n\nconst SongsPage = () => {\n  const [songs, setSongs] = useState([]);\n  // const [songsMap, setSongsMap] = useState({});\n  const [loadingSongs, setLoadingSongs] = useState(true);\n\n  const makeArrayFromDB = snapshot => {\n    return Object.entries(snapshot.val()).map(([id, item]) => {\n      item.id = id;\n      return item;\n    });\n  }\n\n  useEffect(() => {\n    onValue(api.getSongsRef(), snapshot => {\n      // setSongsMap(snapshot.val());\n      const songsArr = makeArrayFromDB(snapshot);\n      setSongs(songsArr);\n      setLoadingSongs(false);\n    });\n  }, [])\n\n  if (loadingSongs) return <p>Loading...</p>\n\n  return  (\n    <div className=\"page-songs\">\n      <div className=\"songlist-container\">\n        <ol className=\"songlist\">\n          {songs.map(s => <li key={s.id} >{s.title}</li>)}\n        </ol>\n      </div>\n    </div>\n  )\n}\n\nexport default SongsPage;\n","import api from \"../api\";\n\nconst Footer = () => {\n  return  (\n    <div className=\"page-footer\">\n      <button type=\"button\" onClick={api.logout}>logout</button>\n    </div>\n  )\n}\n\nexport default Footer;\n","import Nav from './Nav';\nimport { Switch, Route } from \"react-router-dom\";\nimport SetlistsPage from './Setlists/SetlistsPage';\nimport SongsPage from './Songs/SongsPage';\nimport Footer from './Footer';\n\nconst Page = () => {\n  return  (\n    <div className=\"page\">\n      <Nav/>\n      <Switch>\n        <Route path=\"/setlists\">\n          <SetlistsPage/>\n        </Route>\n        <Route path=\"/songs\">\n          <SongsPage/>\n        </Route>\n        <Route path=\"/\">\n          <SetlistsPage/>\n        </Route>\n      </Switch>\n      <Footer/>\n    </div>\n  )\n}\n\nexport default Page;\n","import {useFetchAuth} from './useFetchAuth';\nimport LoginForm from './Forms/LoginForm';\nimport Page from './components/Page';\n\nimport './globals.css'\nimport './songlist.css'\n\nconst App = () => {\n  const [loadingUser, user] = useFetchAuth();\n  if (loadingUser) return <div className=\"loading\">loading...</div>;\n\n  return user.logged_in\n    ? <Page/>\n    : <LoginForm/>\n}\n\nexport default App;\n","// This hook returns current user status\nimport { useState, useEffect } from 'react'\nimport api from './api'\n\nexport const useFetchAuth = () => {\n  const [ user, setUser ] = useState({})\n  const [ loading, setLoading ] = useState(true)\n\n  useEffect(() => {\n    setLoading(true)\n    api.getLoginObserver((user) => {\n        setUser({\n            name: user.email || 'Guest',\n            logged_in: user.email ? true : false\n        })\n        setLoading(false)\n    })\n\n  }, [])\n\n  return [ loading, user ]\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { HashRouter } from \"react-router-dom\";\n\n// Before Deployment, setup router for github-pages if using BrowserRouter\n// https://create-react-app.dev/docs/deployment/#github-pages\n\nReactDOM.render(\n  <HashRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}